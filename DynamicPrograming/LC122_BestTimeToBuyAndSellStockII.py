# coding: utf-8
"""122. 买卖股票的最佳时机 II
给定一个数组 prices ，其中 prices[i] 是一支给定股票第 i 天的价格。

设计一个算法来计算你所能获取的最大利润。你可以尽可能地完成更多的交易（多次买卖一支股票）。

注意：你不能同时参与多笔交易（你必须在再次购买前出售掉之前的股票）。



示例 1:

输入: prices = [7,1,5,3,6,4]
输出: 7
解释: 在第 2 天（股票价格 = 1）的时候买入，在第 3 天（股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     随后，在第 4 天（股票价格 = 3）的时候买入，在第 5 天（股票价格 = 6）的时候卖出, 这笔交易所能获得利润 = 6-3 = 3 。
示例 2:

输入: prices = [1,2,3,4,5]
输出: 4
解释: 在第 1 天（股票价格 = 1）的时候买入，在第 5 天 （股票价格 = 5）的时候卖出, 这笔交易所能获得利润 = 5-1 = 4 。
     注意你不能在第 1 天和第 2 天接连购买股票，之后再将它们卖出。因为这样属于同时参与了多笔交易，你必须在再次购买前出售掉之前的股票。
示例 3:

输入: prices = [7,6,4,3,1]
输出: 0
解释: 在这种情况下, 没有交易完成, 所以最大利润为 0。


提示：

1 <= prices.length <= 3 * 10^4
0 <= prices[i] <= 10^4
"""
from typing import List


class Solution:
    def maxProfit(self, prices: List[int]) -> int:
        '''动态规划

        思路:
            本题是典型的多阶段决策最优解问题，尝试按动态规划的思路定义状态维度.
            注意: 多阶段决策中每次决策维度可能不止是1维的是/否或者2维的上下左右(图/数组)，也可能是多维度矩阵

            状态维度1: 天数, 最直观的抽象
            状态维度2: 手中是否持有股票, 持有记为0/不持有记为1.
                    注意这里不能抽象为卖出/买入/不动, 因为不动的状态向另外两个状态转移时需要判断当前是否持有股票, 需要再加1个维度
            状态: 当前状态的最大利润

            解: [最后一天][0]的值

            状态转移:
            dp[i][0] = max(dp[i - 1][0], dp[i - 1][1] + prices[i - 1])
            dp[i][1] = max(dp[i - 1][0] - prices[i], dp[i - 1][1])

        复杂度:
            time: O(N)
            space: O(N)
        '''
        dp = [
            [0, -prices[0]]
        ]
        for i, p in enumerate(prices[1:], start=1):
            dp.append([
                max(dp[i - 1][0], dp[i - 1][1] + prices[i]),
                max(dp[i - 1][0] - p, dp[i - 1][1])
            ])
        return dp[-1][0]
