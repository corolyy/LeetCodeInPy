# coding: utf-8
"""70. 爬楼梯
假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

注意：给定 n 是一个正整数。

示例 1：

输入： 2
输出： 2
解释： 有两种方法可以爬到楼顶。
1.  1 阶 + 1 阶
2.  2 阶
示例 2：

输入： 3
输出： 3
解释： 有三种方法可以爬到楼顶。
1.  1 阶 + 1 阶 + 1 阶
2.  1 阶 + 2 阶
3.  2 阶 + 1 阶
"""
class Solution:
    def climbStairs(self, n: int) -> int:
        '''动态规划

        思路: 对于N > 2的阶梯，想要一步到位，只能通过(N - 2) + 2 或者 (N - 1) + 1的走法走到
            得到递推公式:
                f(N) = f(N - 1) + f(N - 2)
        复杂度:
            time: O(N)
            space: O(N)
        '''
        if n <= 2:
            return n
        f = [-1] * n
        f[0] = 1
        f[1] = 2
        for i in range(2, n):
            f[i] = f[i - 2] + f[i - 1]
        return f[-1]
