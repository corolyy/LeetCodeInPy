# coding: utf-8
"""239. 滑动窗口最大值
给你一个整数数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。

返回滑动窗口中的最大值。



示例 1：

输入：nums = [1,3,-1,-3,5,3,6,7], k = 3
输出：[3,3,5,5,6,7]
解释：
滑动窗口的位置                最大值
---------------               -----
[1  3  -1] -3  5  3  6  7       3
 1 [3  -1  -3] 5  3  6  7       3
 1  3 [-1  -3  5] 3  6  7       5
 1  3  -1 [-3  5  3] 6  7       5
 1  3  -1  -3 [5  3  6] 7       6
 1  3  -1  -3  5 [3  6  7]      7
示例 2：

输入：nums = [1], k = 1
输出：[1]
示例 3：

输入：nums = [1,-1], k = 1
输出：[1,-1]
示例 4：

输入：nums = [9,11], k = 2
输出：[11]
示例 5：

输入：nums = [4,-2], k = 2
输出：[4]


提示：

1 <= nums.length <= 105
-104 <= nums[i] <= 104
1 <= k <= nums.length

"""
from typing import List
from queue import PriorityQueue
import heapq


class Solution:
    def maxSlidingWindowMonotoneQueue(self, nums: List[int], k: int) -> List[int]:
        '''单调队列法

        原理: 保持队列左端合法且最大，整个队列单调递减;
        关键:
            - 入队前校验左端是否合法；
            - 入队前将<=新成员的成员全部移除;
            - 状态缓存: 需要缓存下标
        '''
        def monotone():
            while mono_q and mono_q[-1][1] <= value:
                mono_q.pop()
            mono_q.append((index, value))

        if not nums or k == 1:
            return nums

        result = []
        mono_q = []
        # 构建初始队列
        for index, value in enumerate(nums[:k]):
            monotone()
        result.append(mono_q[0][1])

        # 队列迭代构建
        for index, value in enumerate(nums[k:], start=k):
            if mono_q[0][0] <= index - k:
                mono_q.pop(0)
            monotone()
            result.append(mono_q[0][1])
        return result

    def maxSlidingWindowPriorityQueue(self, nums: List[int], k: int) -> List[int]:
        '''优先队列法

        1. 构建大顶堆;
        2. 进行合法性处理后取堆顶:
            1. 先判断堆顶是否在范围内，需要额外记录索引值(重点);
            2. 加入新元素进行堆化
        '''
        if not nums or k == 1:
            return nums

        q = [[-v, i] for i, v in enumerate(nums[:k])]
        heapq.heapify(q)
        print(q[0])
        result = [-q[0][0]]
        for i, v in enumerate(nums[k:], k):
            # 若堆顶不在窗口内，需要清理，避免残留数据干扰
            while q and q[0][1] + k <= i:
                heapq.heappop(q)
            heapq.heappush(q, [-v, i])
            result.append(-q[0][0])
        return result

    def maxSlidingWindowBruteForce(self, nums: List[int], k: int) -> List[int]:
        if k == 1:
            return nums

        result = []
        for i in range(len(nums) - k):
            result.append(heapq.nlargest(1, nums[i: i + k])[0])
        return result

    def minSlidingWindow(self, nums: List[int], k: int) -> List[int]:
        if k == 1:
            return nums

        result = []
        for i in range(len(nums) - k + 1):
            pq = PriorityQueue()
            heapq.heapreplace()
            for item in nums[i: i + k]:
                pq.put(item)
            result.append(pq.get())
        return result


if __name__ == "__main__":
    print(Solution().maxSlidingWindow([1, 2, 3, 4, 5, 6], 3))
    l1 = [2312,-5626,-2239,8258,-8372,5780,-6050,5914,-3526,8769,1390,1321,-2887,7514,1163,9153,-3018,8432,-1083,666,-4086,86,3597,-980,-7939,-2120,5448,-1182,7916,1202,2933,-985,392,-2015,-6474,7609,6959,6738,9606,4087,3314,-2442,-8555,-627,-2911,1604,6588,5832,8268,-8676,2863,3617,-3281,6907,5127,9323,3865,4125,-5711,-8948,136,4395,-9170,-6889,3751,-2425,9057,-3574,-503,5865,-4607,9925,3803,7240,5538,9770,-6604,-8593,7822,2959,-2004,8421,-6017,7925,6053,-6412,-756,2910,5858,-7491,-7396,-7882,-5301,-3529,-4678,-7703,7388,-4171,-5179,-3796,7967,-863,2178,6869,-1397,3650,1449,-4371,-9809,-769,-8090,9418,-4691,5442,2282,-2999,6770,-4555,-7693,6984,172,-469,6318,-3584,886,9725,-6423,4313,-6105,-2693,-4804,4435,-7168,305,587,-3229,-3306,-9272,9626,8080,2553,-7104,-8360,2615,-6185,-2126,-8345,-6458,8647,2535,5754,127,-5064,-5,3196,2397,-4292,-9930,4121,-9836,-7211,1532,-2547,-7196,7473,3050,5777,-9280,-7720,-6929,-2768,7114,-3201,1284,1451,-5873,-5931,-7182,-904,-9866,6288,6236,-3227,9093,-3765,7849,7383,-4478,-7630,-2113,5524,8183,4965,4084,5200,3777,7231,-7139,4408,7425,5658,5741,1035,8475,7689,-5026,7349,5930,-3736,-3417,-9370,-7292,-9657,4191,4040,9543,-8759,3733,-6880,3803,6214,-6299,-6619,-9740,-7827,8481,-5486,9349,6517,-4066,-2176,-6105,4960,-6073,-3710,9758,-2733,2561,-68,1516,-7728,2876,-6327,-8591,-7659,-1664,7741,9098,-6216,-1027,3842,-2024,-9070,6950,2030,5414,6204,-5656,8345,9802,-7232,-9049,-2490,1347,-495,-7942,7728,-1919,4595,8845,597,5259,2685,4194,406,9471,2502,5299,1495,6382,4577,9066,-4137,-4633,6371,6731,-9746,-967,320,-764,-7259,-6725,-955,5067,5309,-422,5104,-9327,-2759,3449,6098,6313,-7749,-9012,-8961,7667,-8358,6955,3370,3377,-7738,-466,6148,-877,2002,-2959,8839,-4247,5360,-216,-9881,-4640,4540,-1227,7778,6937,24,9789,8833,89,-486,8370,4307,-9951,-9389,9413,2123,-5131,6982,-7626,-4195,1511,7936,-3441,-3942,3943,-9055,5791,-8383,9521,9879,6060,-5631,-8650,3300,3754,8314,-2944,8687,-5170,1728,9512,2448,130,-9678,3568,-6992,7761,-1176,-8361,2141,-6764,-4073,8978,5926,8623,-3378,-2302,-7077,1220,1459,-5693,-7243,7866,-7864,2742,9625,-605,8411,-7986,-7558,-4339,-9022,8642,6659,7311,-9575,9862,-215,3065,-453,-3892,-2064,7345,4938,-8991,5900,3525,2211,-7571,-3889,-128,-2198,8840,4365,6831,3586,4018,-9014,-1054,-1190,9089,6439,8238,-3354,2521,4678,4016,-7701,-8238,449,-1676,1230,-7218,6095,112,-4919,7617,1326,226,-2904,2423,1055,4159,-1890,-2719,5068,-4074,195,340,-4097,-6922,9158,8784,5020,803,-3169,1180,8011,-7538,1670,148,3622,610,9840,1592,-3953,7456,-2995,-9752,2596,-157,-7124,-2317,1571,-3800,-6037,-2203,8772,5648,-1481,-9737,490,-3412,-1087,8717,-7617,7983,-8878,8963,522,5222,-4974,-7776,662,-331,-3268,-5343,-3515,157,8430,-8700,-4308,-3680,8179,-7689,1660]
    k1 = 238

